#+TITLE: Kubernetes Notes


https://microk8s.io/
MicroK8s is pure upstream Kubernetes, not a subset.
We keep it small with sensible choices that just work. That makes a quick install, with easy upgrades and great security ‚Äî and leaves your options open later.


Minikube:  Single Node Kubernetes Cluster
           ISO image can be downloaded and installed on VirtualBox


http://kubernetes.io


https://kubernetes.io/docs/tasks/tools/install-kubectl/

https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/



# Note: running the commands as regular user:

seba@d10r77:~$ minikube start --driver=virtualbox
üòÑ  minikube v1.12.1 on Debian 10.4
‚ú®  Using the virtualbox driver based on user configuration
üíø  Downloading VM boot image ...
    > minikube-v1.12.0.iso.sha256: 65 B / 65 B [-------------] 100.00% ? p/s 0s
    > minikube-v1.12.0.iso: 173.57 MiB / 173.57 MiB [] 100.00% 34.85 MiB p/s 5s
üëç  Starting control plane node minikube in cluster minikube
üíæ  Downloading Kubernetes v1.18.3 preload ...
    > preloaded-images-k8s-v4-v1.18.3-docker-overlay2-amd64.tar.lz4: 526.27 MiB
üî•  Creating virtualbox VM (CPUs=2, Memory=4000MB, Disk=20000MB) ...
üê≥  Preparing Kubernetes v1.18.3 on Docker 19.03.12 ...
üîé  Verifying Kubernetes components...
üåü  Enabled addons: default-storageclass, storage-provisioner
üèÑ  Done! kubectl is now configured to use "minikube"


$ minikube status

minikube
type: Control Plane
host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured



$ minikube stop


- Clean up local state

If you have previously installed Minikube, and run:

minikube start

and minikube start returned an error:

machine does not exist

then you need to clear minikube's local state:

minikube delete

=============================

Minikube is a tool that makes it easy to run Kubernetes LOCALLY. Minikube runs a single-node Kubernetes cluster inside a Virtual Machine (VM) on your laptop for users looking to try out Kubernetes or develop with it day-to-day.

Minikube supports the following Kubernetes features:
- DNS
- NodePorts
- ConfigMaps and Secrets
- Dashboards
- Container Runtime: Docker, CRI-O, and containerd
- Enabling CNI (Container Network Interface)
- Ingress




kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10


# to access hello-minikube Deployment, expose it as a Service:

kubect expose deployment hello-minikube --type=NodePort --port=8080





To work with the Docker daemon on your Mac/Linux host, run the last line from

minikube docker-env



kubectl create deployment nginx --image nginx


kubectl expose deployment nginx --port 80 --target-port 80 --selector app=nginx --type NodePort --name nginx1



minikube service nginx1 --url
http://192.168.99.100:31472

w3m http://192.168.99.100:31472

Welcome to Nginx ...






 kubectl get all
NAME                                  READY   STATUS    RESTARTS   AGE
pod/hello-minikube-64b64df8c9-s2rlq   1/1     Running   0          41m
pod/nginx-f89759699-78t69             1/1     Running   0          99s

NAME                     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
service/hello-minikube   NodePort    10.105.240.174   <none>        8080:30806/TCP   40m
service/kubernetes       ClusterIP   10.96.0.1        <none>        443/TCP          65m
service/nginx            ClusterIP   10.105.126.99    <none>        80/TCP           44s

NAME                             READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/hello-minikube   1/1     1            1           41m
deployment.apps/nginx            1/1     1            1           99s

NAME                                        DESIRED   CURRENT   READY   AGE
replicaset.apps/hello-minikube-64b64df8c9   1         1         1       41m
replicaset.apps/nginx-f89759699             1         1         1       99s





==================================================


https://hub.docker.com/_/wordpress

wordpress:5.4.2-apache

wordpress:5.4.2-fpm






How to use this image

$ docker run --name some-wordpress --network some-network -d wordpress

The following environment variables are also honored for configuring your WordPress instance:

    -e WORDPRESS_DB_HOST=...
    -e WORDPRESS_DB_USER=...
    -e WORDPRESS_DB_PASSWORD=...
    -e WORDPRESS_DB_NAME=...
    -e WORDPRESS_TABLE_PREFIX=...
    -e WORDPRESS_AUTH_KEY=..., -e WORDPRESS_SECURE_AUTH_KEY=..., -e WORDPRESS_LOGGED_IN_KEY=..., -e WORDPRESS_NONCE_KEY=..., -e WORDPRESS_AUTH_SALT=..., -e WORDPRESS_SECURE_AUTH_SALT=..., -e WORDPRESS_LOGGED_IN_SALT=..., -e WORDPRESS_NONCE_SALT=... (default to unique random SHA1s, but only if other environment variable configuration is provided)
    -e WORDPRESS_DEBUG=1 (defaults to disabled, non-empty value will enable WP_DEBUG in wp-config.php)
    -e WORDPRESS_CONFIG_EXTRA=... (defaults to nothing, non-empty value will be embedded verbatim inside wp-config.php -- especially useful for applying extra configuration values this image does not provide by default such as WP_ALLOW_MULTISITE; see docker-library/wordpress#142 for more details)


If you'd like to be able to access the instance from the host without the container's IP, standard port mappings can be used:

$ docker run --name some-wordpress -p 8080:80 -d wordpress

Then, access it via http://localhost:8080 or http://host-ip:8080 in a browser.



==================================================

Varnish is an HTTP accelerator designed for content-heavy dynamic web sites as well as APIs.
https://hub.docker.com/_/varnish

Jobber is an alternative to cron, with sophisticated status-reporting and error-handling.
https://hub.docker.com/_/jobber



Elasticsearch - powerful open source search and analytics engine that makes data easy to explore.
https://hub.docker.com/_/elasticsearch




https://hub.docker.com/_/logstash
Logstash is a tool for managing events and logs.


https://hub.docker.com/_/mediawiki


Gnu Compiler Collection
https://hub.docker.com/_/gcc


irssi - The IRC client of the future
https://hub.docker.com/_/irssi

Postfix Admin - web based administration interface for Postfix mail servers.
https://hub.docker.com/_/postfixadmin


https://hub.docker.com/_/fluentd
Fluentd is a streaming data collector for unified logging layer hosted by CNCF. Fluentd lets you unify the data collection and consumption for a better use and understanding of data.



* via docker stack deploy or docker-compose

https://hub.docker.com/_/wordpress

Example stack.yml for wordpress:

version: '3.1'

services:

  wordpress:
    image: wordpress
    restart: always
    ports:
      - 8080:80
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: exampleuser
      WORDPRESS_DB_PASSWORD: examplepass
      WORDPRESS_DB_NAME: exampledb
    volumes:
      - wordpress:/var/www/html

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: exampledb
      MYSQL_USER: exampleuser
      MYSQL_PASSWORD: examplepass
      MYSQL_RANDOM_ROOT_PASSWORD: '1'
    volumes:
      - db:/var/lib/mysql

volumes:
  wordpress:
  db:

Try in PWD

Run docker stack deploy -c stack.yml wordpress (or docker-compose -f stack.yml up), wait for it to initialize completely, and visit http://swarm-ip:8080, http://localhost:8080, or http://host-ip:8080 (as appropriate).



* via docker stack deploy or docker-compose

Example stack.yml for mediawiki:

# MediaWiki with MariaDB
#
# Access via "http://localhost:8080"
#   (or "http://$(docker-machine ip):8080" if using docker-machine)
version: '3'
services:
  mediawiki:
    image: mediawiki
    restart: always
    ports:
      - 8080:80
    links:
      - database
    volumes:
      - /var/www/html/images
      # After initial setup, download LocalSettings.php to the same directory as
      # this yaml and uncomment the following line and use compose to restart
      # the mediawiki service
      # - ./LocalSettings.php:/var/www/html/LocalSettings.php
  database:
    image: mariadb
    restart: always
    environment:
      # @see https://phabricator.wikimedia.org/source/mediawiki/browse/master/includes/DefaultSettings.php
      MYSQL_DATABASE: my_wiki
      MYSQL_USER: wikiuser
      MYSQL_PASSWORD: example
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'


Run docker stack deploy -c stack.yml mediawiki (or docker-compose -f stack.yml up), wait for it to initialize completely, and visit http://swarm-ip:8080, http://localhost:8080, or http://host-ip:8080 (as appropriate).


* worklog


sudo docker stack deploy -c stack.yml  wordpress
Ignoring unsupported options: restart

this node is not a swarm manager. Use "docker swarm init" or "docker swarm join" to connect this node to swarm and try again
